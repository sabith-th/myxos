alias currentPID S0;
alias currentPCB S1;
if(PTBR>=1024 && PTBR<=1279) then
	currentPID = (PTBR - 1024) / 8;
	currentPCB = READY_LIST + 32 * currentPID;
else
	currentPID= (PTBR - 12800) / 8 + 32;
	currentPCB = 13312 + 32 * (currentPID%32);
endif;
[currentPCB + 1 ] = 1;
[currentPCB + 2 ] = BP;
[currentPCB + 3 ] = SP - 1;
alias physicalSP S2;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 
[currentPCB + 4 ] = [physicalSP];
[currentPCB + 5 ] = PTBR;
[currentPCB + 6 ] = PTLR;
[currentPCB + 7 ] = R0;
[currentPCB + 8 ] = R1;
[currentPCB + 9 ] = R2;
[currentPCB + 10 ] = R3;
[currentPCB + 11 ] = R4;
[currentPCB + 12 ] = R5;
[currentPCB + 13 ] = R6; 
[currentPCB + 14 ] = R7;
alias newphysicalSP S2;
alias newPCB S3;
alias newPID S4;
newPID=(currentPID+1)%64;
if (newPID<32) then
	newPCB=READY_LIST + 32 * newPID;
else
	newPCB=13312 + 32 * (newPID%32);
endif;
while([newPCB+1]!=1) do
	newPID=(newPID+1)%64;
	if (newPID<32) then
		newPCB=READY_LIST + 32 * newPID;
	else
		newPCB=13312 + 32 * (newPID%32);
	endif;
endwhile;
BP=[newPCB + 2];
SP=[newPCB + 3];
PTBR=[newPCB + 5];
PTLR=[newPCB + 6];
R0=[newPCB + 7];
R1=[newPCB + 8];
R2=[newPCB + 9];
R3=[newPCB + 10];
R4=[newPCB + 11];
R5=[newPCB + 12];
R6=[newPCB + 13];
R7=[newPCB + 14];
if(!([PTBR+6]>=28 && [PTBR+6]<=63)) then
	alias i S5;
	i=28;
	while(i<64) do
		if([MEM_LIST+i]==0) then
			load(i,[PTBR+6]);
			[DISK_LIST+[PTBR+6]]=[DISK_LIST+[PTBR+6]]-1;
			store(6,20);
			[PTBR+6]=i;
			[MEM_LIST+i]=1;
			[PTBR+7]="01";
			break;
		endif;
		i=i+1;
	endwhile;
	if(i==64) then
		alias found S6;
		found=0;
		alias Base S7;
		i=0;
		while(found==0) do
			if(i<128) then
				Base=1024;
			else
				Base=12800;
			endif;
			if([Base+2*(i%128)]==[PTBR+6]) then
				i=i+1;
				i=i%256;
				continue;
			endif;
			if ([Base + (i%128) * 2 + 1]=="01") then
				if([MEM_LIST+[Base+2*(i%128)]]>1) then
					i=i+1;
					i=i%256;
					continue;
				endif;
				alias k S14;
				k=448;
				while(k<512) do
					if([DISK_LIST+k]==0) then
						[DISK_LIST+k]=1;
						store(6,20);
						break;
					endif;
					k=k+1;
				endwhile;
				if(k==512) then
					print("Swap Full");
					halt;
				endif;
				store([Base+(i%128)*2],k);
				found=[Base+(i%128)*2];
				[Base+(i%128)*2]=k;
				[Base+(i%128)*2+1]="00";
				break;
			endif;
			if([Base+(i%128)*2+1]=="11") then
				[Base+(i%128)*2+1]="01";
			endif;
			i=i+1;
			i=i%256;
			//breakpoint;
		endwhile;
		i=found;
		load(i,[PTBR+6]);
		[DISK_LIST+[PTBR+6]]=[DISK_LIST+[PTBR+6]]-1;
		store(6,20);
		[PTBR+6]=i;
		[MEM_LIST+i]=1;
		[PTBR+7]="01";
	endif;
endif;	
SP = SP + 1;
newphysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newphysicalSP ] = [newPCB + 4 ];
[newPCB + 1] = 2;
ireturn;
